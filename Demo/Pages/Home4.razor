@page "/4"
@using System.Timers

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<h3>Chart Demo</h3>
<ChartComponent ChartId="chart1" Title="Simple Chart" SeriesLabels="@(new List<string> { "Value", "Value x" })"
                InitialData="_data" LineColors="@(new List<string> { "#000000", "#008000" })" @ref="_chartComponent"/>

@code {

    private List<List<double>> _data =
    [
        new() { 0, 1, 2, 3, 4, 5 }, // X-axis
        new() { 10, 20, 30, 40, 50, 60 }, // CPU
        new() { 10, 20, 30, 40, 50, 60 }
    ];

    private ChartComponent? _chartComponent;

    private Timer? _timer;
    private int _counter = 10;

    protected override void OnInitialized()
    {
        _timer = new Timer(50);
        _timer.Elapsed += AddNewData;
        _timer.Start();
    }

    private void AddNewData(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            var newX = _counter;
            var newValue = (10 + _counter * 1.3 / 3 - 20 + Math.Atan2(_counter, 10)) * Math.Sin(_counter);
            var delayedValue = _data[1].Count > 2 ? _data[1][_data[1].Count - 3] : newValue;

            _counter++;

            if (_chartComponent != null)
            {
                // Only send the new points
                var newPoints = new List<List<double>>
                {
                    new() { newX },
                    new() { newValue },
                    new() { delayedValue }
                };
                await _chartComponent.AppendData(newPoints);
            }

            // Optionally, keep the data for other logic
            _data[0].Add(newX);
            _data[1].Add(newValue);
            _data[2].Add(delayedValue);
        });
    }

}